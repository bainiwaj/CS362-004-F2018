        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Jaspal Bainiwal
        -:    3:* This is the random test for the outpost card.
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include "rngs.h"
        -:   12:#include<stdlib.h>
        -:   13:#include<time.h>
        -:   14:int myAssertFunction(int x, int y);
        -:   15:int myGreaterAssert(int x, int y);
        -:   16:int testRand(int x);
        -:   17:
function main called 1 returned 100% blocks executed 100%
        1:   18:int main() {
        1:   19:	srand(time(NULL));
call    0 returned 1
call    1 returned 1
        1:   20:	int counter = 0;
        1:   21:	int testGenerated = 100;
        1:   22:	int totalTest = testGenerated * 4;
        -:   23:	int testFailed;
        -:   24:	int testPassed;
        -:   25:	int i;
      101:   26:	for (i = 0; i < testGenerated; i++)
branch  0 taken 100
branch  1 taken 1 (fallthrough)
        -:   27:	{
      100:   28:		counter = testRand(i + 1);
call    0 returned 100
      100:   29:		testPassed = testPassed + counter;
        -:   30:	}
        1:   31:	testFailed = totalTest - testPassed;
        1:   32:	printf("Test that passed: %d\nTest that failed: %d\n", testPassed, testFailed);
call    0 returned 1
        1:   33:	return 0;
        -:   34:}
        -:   35:
function testRand called 100 returned 100% blocks executed 97%
      100:   36:int testRand(int x) {
      100:   37:	int seed = 1000;
      100:   38:	int numPlayer = 2;
        -:   39:	int checker;
      100:   40:	int counter = 0;
      100:   41:	int max = 1;
      100:   42:	int min = 0;
        -:   43:	int handSize;
        -:   44:	int handDiff;
      100:   45:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
      100:   46:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   47:		, remodel, smithy, village, baron, great_hall };
        -:   48:	struct gameState G, testG;
        -:   49:	int difference;
        -:   50:	int difference2;
        -:   51:	int difference3;
        -:   52:	int thisPlayer;
      100:   53:	initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100
      100:   54:	memcpy(&testG, &G, sizeof(struct gameState));
      100:   55:	printf("TESTING Outpost randomly: %d\n", x);
call    0 returned 100
      100:   56:	testG.whoseTurn = rand() % (max + 1 - min) + min;
call    0 returned 100
      100:   57:	thisPlayer = testG.whoseTurn;
      100:   58:	printf("Testing card increases outpost played for player %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   59:	difference = testG.outpostPlayed;
      100:   60:	cardEffect(outpost, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   61:	difference2 = testG.outpostPlayed;
      100:   62:	difference3 = difference2 - difference;
      100:   63:	printf("Expect a difference of 1 actual difference output %d\n", difference3);
call    0 returned 100
      100:   64:	checker = myAssertFunction(difference3, 1);
call    0 returned 100
      100:   65:	if (checker == 1)
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -:   66:	{
      100:   67:		counter++;
        -:   68:	}
      100:   69:	if (testG.whoseTurn == 1)
branch  0 taken 57 (fallthrough)
branch  1 taken 43
        -:   70:	{
       57:   71:		thisPlayer = 0;
        -:   72:	}
        -:   73:	else
        -:   74:	{
       43:   75:		thisPlayer = 1;
        -:   76:	}
      100:   77:	printf("Testing card increases outpost played for any other player: %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   78:	testG.whoseTurn = thisPlayer;
      100:   79:	difference = testG.outpostPlayed;
      100:   80:	cardEffect(outpost, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   81:	difference2 = testG.outpostPlayed;
      100:   82:	difference3 = difference2 - difference;
      100:   83:	printf("Expect a difference of 1 actual difference output %d\n", difference3);
call    0 returned 100
      100:   84:	checker = myAssertFunction(difference3, 1);
call    0 returned 100
      100:   85:	if (checker == 1)
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -:   86:	{
      100:   87:		counter++;
        -:   88:	}
        -:   89:
      100:   90:	memcpy(&testG, &G, sizeof(struct gameState));
      100:   91:	printf("Testing the bug is still present, where coin amount is being changed %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   92:	testG.whoseTurn = thisPlayer;
      100:   93:	difference = testG.coins;
      100:   94:	handSize = testG.playedCardCount;
      100:   95:	cardEffect(outpost, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   96:	handDiff = testG.playedCardCount;
      100:   97:	difference2 = testG.coins;
      100:   98:	difference3 = difference2 - difference;
      100:   99:	printf("Expect 5 difference in coins actual coin difference =  %d\n", difference3);
call    0 returned 100
      100:  100:	checker = myAssertFunction(difference3, 5);
call    0 returned 100
      100:  101:	if (checker == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:  102:	{
    #####:  103:		counter++;
        -:  104:	}
      100:  105:	printf("Checking card has been discard properly for player %d\n", (thisPlayer + 1));
call    0 returned 100
      100:  106:	checker = myGreaterAssert(handDiff, handSize);
call    0 returned 100
      100:  107:	if (checker == 1)
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -:  108:	{
      100:  109:		counter++;
        -:  110:	}
      100:  111:	return counter;
        -:  112:}
        -:  113:
        -:  114:/*Wrote my own assert function because the helpful hint suggested that
        -:  115:* the built in assert might crash the program*/
function myAssertFunction called 300 returned 100% blocks executed 100%
      300:  116:int myAssertFunction(int x, int y)
        -:  117:{
      300:  118:	if (x != y)
branch  0 taken 100 (fallthrough)
branch  1 taken 200
        -:  119:	{
      100:  120:		printf("TEST FAILED\n");
call    0 returned 100
      100:  121:		return 0;
        -:  122:	}
        -:  123:
        -:  124:	else
        -:  125:	{
      200:  126:		printf("TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 200
      200:  127:		return 1;
        -:  128:	}
        -:  129:}
        -:  130:
function myGreaterAssert called 100 returned 100% blocks executed 67%
      100:  131:int myGreaterAssert(int x, int y)
        -:  132:{
      100:  133:	if (x < y)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:  134:	{
    #####:  135:		printf("TEST FAILED\n");
call    0 never executed
    #####:  136:		return 0;
        -:  137:	}
        -:  138:
        -:  139:	else
        -:  140:	{
      100:  141:		printf("TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 100
      100:  142:		return 1;
        -:  143:	}
        -:  144:}
