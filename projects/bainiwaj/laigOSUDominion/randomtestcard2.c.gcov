        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Jaspal Bainiwal
        -:    3:* This is the random test for the great hall card.
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include "rngs.h"
        -:   12:#include<stdlib.h>
        -:   13:#include<time.h>
        -:   14:int myAssertFunction(int x, int y);
        -:   15:int myGreaterAssert(int x, int y);
        -:   16:int testRand(int x);
        -:   17:
function main called 1 returned 100% blocks executed 100%
        1:   18:int main() {
        1:   19:	srand(time(NULL));
call    0 returned 1
call    1 returned 1
        1:   20:	int counter = 0;
        1:   21:	int testGenerated = 100;
        1:   22:	int totalTest = testGenerated * 4;
        -:   23:	int testFailed;
        -:   24:	int testPassed;
        -:   25:	int i;
      101:   26:	for (i = 0; i < testGenerated; i++)
branch  0 taken 100
branch  1 taken 1 (fallthrough)
        -:   27:	{
      100:   28:		counter = testRand(i + 1);
call    0 returned 100
      100:   29:		testPassed = testPassed + counter;
        -:   30:	}
        1:   31:	testFailed = totalTest - testPassed;
        1:   32:	printf("Test that passed: %d\nTest that failed: %d\n", testPassed, testFailed);
call    0 returned 1
        1:   33:	return 0;
        -:   34:}
        -:   35:
function testRand called 100 returned 100% blocks executed 93%
      100:   36:int testRand(int x) {
      100:   37:	int seed = 1000;
      100:   38:	int numPlayer = 2;
        -:   39:	int checker;
      100:   40:	int counter = 0;
      100:   41:	int max = 1;
      100:   42:	int min = 0;
      100:   43:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
      100:   44:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   45:		, remodel, smithy, village, baron, great_hall };
        -:   46:	struct gameState G, testG;
        -:   47:	int thisPlayer;
        -:   48:	int difference;
        -:   49:	int difference2;
        -:   50:	int difference3;
      100:   51:	initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100
      100:   52:	memcpy(&testG, &G, sizeof(struct gameState));
      100:   53:	printf("TESTING Great Hall randomly %d:\n", x);
call    0 returned 100
      100:   54:	testG.whoseTurn = rand() % (max + 1 - min) + min;
call    0 returned 100
      100:   55:	thisPlayer = testG.whoseTurn;
      100:   56:	printf("Testing card increases actions for player %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   57:	difference = testG.numActions;
      100:   58:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   59:	difference2 = testG.numActions;
      100:   60:	difference3 = difference2 - difference;
      100:   61:	checker = myAssertFunction(difference3, 1);
call    0 returned 100
      100:   62:	if (checker == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:   63:	{
    #####:   64:		counter++;
        -:   65:	}
      100:   66:	memcpy(&testG, &G, sizeof(struct gameState));
      100:   67:	testG.whoseTurn = thisPlayer;
      100:   68:	printf("Testing card has no change on hand count for player %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   69:	difference = testG.handCount[thisPlayer];
      100:   70:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   71:	difference2 = testG.handCount[thisPlayer];
      100:   72:	checker = myAssertFunction(difference, difference2);
call    0 returned 100
      100:   73:	if (checker == 1)
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -:   74:	{
      100:   75:		counter++;
        -:   76:	}
      100:   77:	memcpy(&testG, &G, sizeof(struct gameState));
      100:   78:	testG.whoseTurn = thisPlayer;
      100:   79:	printf("Testing card at random handpos has been discarded for player %d\n", (thisPlayer + 1));
call    0 returned 100
      100:   80:	handpos = rand() % (max + 1 - min) + min;
call    0 returned 100
      100:   81:	difference = testG.hand[thisPlayer][handpos];
      100:   82:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   83:	difference2 = testG.hand[thisPlayer][handpos];
      100:   84:	checker = myGreaterAssert(difference, difference2);
call    0 returned 100
      100:   85:	if (checker == 1)
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -:   86:	{
      100:   87:		counter++;
        -:   88:	}
      100:   89:	printf("Testing card works after one player turn ends and another player plays same card \n");
call    0 returned 100
      100:   90:	if (thisPlayer == 1) {
branch  0 taken 45 (fallthrough)
branch  1 taken 55
       45:   91:		testG.whoseTurn = 0;
        -:   92:	}
        -:   93:	else {
       55:   94:		testG.whoseTurn = 1;
        -:   95:	}
      100:   96:	difference = testG.numActions;
      100:   97:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100
      100:   98:	difference2 = testG.numActions;
      100:   99:	difference3 = difference2 - difference;
      100:  100:	checker = myAssertFunction(difference3, 1);
call    0 returned 100
      100:  101:	if (checker == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:  102:	{
    #####:  103:		counter++;
        -:  104:	}
      100:  105:	return counter;
        -:  106:}
        -:  107:
        -:  108:/*Wrote my own assert function because the helpful hint suggested that
        -:  109:* the built in assert might crash the program*/
function myAssertFunction called 300 returned 100% blocks executed 100%
      300:  110:int myAssertFunction(int x, int y)
        -:  111:{
      300:  112:	if (x != y)
branch  0 taken 200 (fallthrough)
branch  1 taken 100
        -:  113:	{
      200:  114:		printf("TEST FAILED\n");
call    0 returned 200
      200:  115:		return 0;
        -:  116:	}
        -:  117:
        -:  118:	else
        -:  119:	{
      100:  120:		printf("TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 100
      100:  121:		return 1;
        -:  122:	}
        -:  123:}
        -:  124:
function myGreaterAssert called 100 returned 100% blocks executed 67%
      100:  125:int myGreaterAssert(int x, int y)
        -:  126:{
      100:  127:	if (x < y)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:  128:	{
    #####:  129:		printf("TEST FAILED\n");
call    0 never executed
    #####:  130:		return 0;
        -:  131:	}
        -:  132:
        -:  133:	else
        -:  134:	{
      100:  135:		printf("TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 100
      100:  136:		return 1;
        -:  137:	}
        -:  138:}
