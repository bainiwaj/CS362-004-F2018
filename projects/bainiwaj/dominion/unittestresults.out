TESTING scoreFor():
Testing if player 1 starts off with hand score of zero
TEST SUCCESSFULLY COMPLETED
Testing if player 1 hand has correct score when handcout is 2
TEST SUCCESSFULLY COMPLETED
Testing if player 2 hand has correct score with handcount 1
TEST SUCCESSFULLY COMPLETED
Testing if player 1 starts off with discard pile score of zero
TEST SUCCESSFULLY COMPLETED
Testing if player 2 starts off with discard pile score of zero
TEST SUCCESSFULLY COMPLETED
Testing if player 1 DISCARD AND DECK score is the expected amount
TEST SUCCESSFULLY COMPLETED
All tests passed!
TESTING endTurn():
gamestate whoseTurn is 0 and after endTurn it should be 1
TEST SUCCESSFULLY COMPLETED
If last players turn has ended it should go to player 0
TEST SUCCESSFULLY COMPLETED
Test if function resets card count
TEST SUCCESSFULLY COMPLETED
Test if hand count resets after turn ends
TEST SUCCESSFULLY COMPLETED
Test if outpost in play resets after turn ends
TEST SUCCESSFULLY COMPLETED
Test if number of buys goes to one
TEST SUCCESSFULLY COMPLETED
All tests passed!
TESTING supplyCount():
Test if supply for kingdom cards was set up correctly for two player game
TEST SUCCESSFULLY COMPLETED
Test if supplyCount is initialized with correct amount of victory cards for two players
TEST SUCCESSFULLY COMPLETED
Test if correct supply of curse cards are set up based on two player game
TEST SUCCESSFULLY COMPLETED
All tests passed!
TESTING fullDeckCount():
Test if deck count for copper is the expected amount during the start of the game for player 1
TEST SUCCESSFULLY COMPLETED
Test if deck count for estate is the expected amount during the start of the game for player 1
TEST SUCCESSFULLY COMPLETED
Test if deck count with cards in players hand is the expected amount
TEST SUCCESSFULLY COMPLETED
Test if discard pile is correct by comparing the expected count amount for a card
TEST SUCCESSFULLY COMPLETED
All tests passed!
TESTING Smithy:
Testing smithy card draws atleast one card for player
TEST SUCCESSFULLY COMPLETED
Testing smithy card draws atleast two card for player
TEST SUCCESSFULLY COMPLETED
Testing smithy card draws three cards then discards one
TEST FAILED
Testing smithy discards one card
TEST SUCCESSFULLY COMPLETED
Not all tests passed!
TESTING adventurer:
Testing adventurer card draws atleast one treasurer card for player 1
TEST SUCCESSFULLY COMPLETED
Testing adventurer card draws atleast one treasurer card for player 2
TEST SUCCESSFULLY COMPLETED
Testing adventurer card draws exactly two treasurer cards for player 1
Expected output = 2 actual output = 1
TEST FAILED
Testing adventurer card draws exactly two treasurer cards for player 2
Expected output = 2 actual output = 1
TEST FAILED
Not all tests passed!
TESTING Outpost:
Testing card increases outpost played for player 1
Expect a difference of 1 actual difference output 1
TEST SUCCESSFULLY COMPLETED
Testing card increases outpost played for player 2
Expect a difference of 1 actual difference output 1
TEST SUCCESSFULLY COMPLETED
Testing coins amount doesn't change for a player
Expect 0 difference in coins actual coin difference =  5
TEST FAILED
Not all tests passed!
TESTING Great Hall:
Testing card increases actions for player 1
TEST SUCCESSFULLY COMPLETED
Testing card increases actions for player 2
TEST SUCCESSFULLY COMPLETED
Testing card has no change on hand count for player 1
TEST SUCCESSFULLY COMPLETED
Testing card has no change on hand count for player 2
TEST SUCCESSFULLY COMPLETED
All tests passed!
File 'dominion.c'
Lines executed:37.77% of 564
Branches executed:40.53% of 417
Taken at least once:28.54% of 417
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 282 returned 100% blocks executed 100%
      282:    8:int compare(const void* a, const void* b) {
      282:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 19 (fallthrough)
branch  1 taken 263
       19:   10:    return 1;
      263:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 66 (fallthrough)
branch  1 taken 197
       66:   12:    return -1;
      197:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 8
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 8
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 80
branch  1 taken 8 (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 800
branch  1 taken 80 (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 720 (fallthrough)
branch  1 taken 80
branch  2 taken 0 (fallthrough)
branch  3 taken 720
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 160
branch  1 taken 8 (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1240
branch  1 taken 80 (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 80 (fallthrough)
branch  1 taken 1160
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 72 (fallthrough)
branch  1 taken 8
branch  2 taken 8 (fallthrough)
branch  3 taken 64
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 48
branch  1 taken 16 (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 112
branch  1 taken 16 (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 16
branch  1 taken 0 (fallthrough)
branch  2 taken 16
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 216
branch  1 taken 8 (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 40
branch  1 taken 8 (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 40
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 8
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 19 returned 100% blocks executed 94%
       19:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       19:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       19:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 19
    #####:  210:    return -1;
       19:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 19
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      220:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 182
branch  1 taken 19 (fallthrough)
      182:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 182
      182:  216:    newDeck[newDeckPos] = state->deck[player][card];
      182:  217:    newDeckPos++;
      623:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 441
branch  1 taken 182 (fallthrough)
      441:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      182:  221:    state->deckCount[player]--;
        -:  222:  }
      201:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 182
branch  1 taken 19 (fallthrough)
      182:  224:    state->deck[player][i] = newDeck[i];
      182:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       19:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 4 returned 100% blocks executed 100%
        4:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        4:  326:  int count = 0;
        -:  327:
       24:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 20
branch  1 taken 4 (fallthrough)
        -:  329:    {
       20:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 11 (fallthrough)
branch  1 taken 9
        -:  331:    }
        -:  332:
       24:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20
branch  1 taken 4 (fallthrough)
        -:  334:    {
       20:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 15 (fallthrough)
branch  1 taken 5
        -:  336:    }
        -:  337:
        9:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 5
branch  1 taken 4 (fallthrough)
        -:  339:    {
        5:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:  341:    }
        -:  342:
        4:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 19 returned 100% blocks executed 100%
       19:  346:int whoseTurn(struct gameState *state) {
       19:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 6 returned 100% blocks executed 100%
        6:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        6:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        -:  354:  
        -:  355:  //Discard hand
       33:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 27
branch  1 taken 6 (fallthrough)
       27:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       27:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        6:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        6:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        6:  370:  state->outpostPlayed = 0;
        6:  371:  state->phase = 0;
        6:  372:  state->numActions = 1;
        6:  373:  state->coins = 0;
        6:  374:  state->numBuys = 1;
        6:  375:  state->playedCardCount = 0;
        6:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       36:  380:  for (k = 0; k < 5; k++){
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 30
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        6:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 6
        -:  386:
        6:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 6 returned 100% blocks executed 66%
        6:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        6:  420:  int score = 0;
        -:  421:  //score from hand
        9:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 3
branch  1 taken 6 (fallthrough)
        -:  423:    {
        3:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        3:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        3:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 3
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        7:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 1
branch  1 taken 6 (fallthrough)
        -:  434:    {
        1:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        7:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 1
branch  1 taken 6 (fallthrough)
        -:  445:    {
        1:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        -:  452:    }
        -:  453:
        6:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 86 returned 100% blocks executed 92%
       86:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       86:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3 (fallthrough)
branch  1 taken 83
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       25:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 22
branch  1 taken 3 (fallthrough)
       22:  534:      state->deck[player][i] = state->discard[player][i];
       22:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 3
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       83:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       83:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       83:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       83:  576:    state->deckCount[player]--;
       83:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       86:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645://refactor and bugs begin here for assignment 2
function adventurerFunction called 4 returned 100% blocks executed 64%
        4:  646:void adventurerFunction(int *drawntreasure, struct gameState *state, int currentPlayer, int *cardDrawn, int *temphand, int *z) {
       12:  647:	while (*drawntreasure<2) {
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        4:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
        4:  651:		drawCard(currentPlayer, state);
call    0 returned 4
        4:  652:		*cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4:  653:		if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4:  654:			*drawntreasure = *drawntreasure + 2; //Here is the bug for adventurer function 
        -:  655:		else {
    #####:  656:			temphand[*z] = *cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			*z = *z + 1;
        -:  659:		}
        -:  660:	}
        8:  661:	while (*z - 1 >= 0) {
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[*z - 1]; // discard all cards in play that have been drawn
    #####:  663:		*z = *z - 1;
        -:  664:	}
        4:  665:}
function smithyFunction called 2 returned 100% blocks executed 100%
        2:  666:void smithyFunction(int currentPlayer, int handPos, struct gameState *state) {
       10:  667:	for (int i = 0; i <= 3; i++)//the i <=3 is the bug for this function
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  668:	{
        8:  669:		drawCard(currentPlayer, state);
call    0 returned 8
        -:  670:	}
        -:  671:
        2:  672:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2:  673:}
function outpostFunction called 3 returned 100% blocks executed 100%
        3:  674:void outpostFunction(int currentPlayer, int handPos, struct gameState *state) {
        3:  675:	state->outpostPlayed++;
        3:  676:	state->coins = state->coins + 5;//the plus 5 coins is the bug in this function
        -:  677:	//discard card
        3:  678:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3:  679:	}
        -:  680:
function greathallFunction called 4 returned 100% blocks executed 100%
        4:  681:void greathallFunction(int currentPlayer, int handPos, struct gameState *state) {
        -:  682:
        4:  683:	drawCard(currentPlayer, state);
call    0 returned 4
        -:  684:
        4:  685:	state->numActions++;
        4:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  687:}
function councilroomFunction called 0 returned 0% blocks executed 0%
    #####:  688:void councilroomFunction(int currentPlayer, int handPos, struct gameState *state) {
    #####:  689:	for (int i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  690:	{
    #####:  691:		drawCard(currentPlayer, state);
call    0 never executed
        -:  692:	}
        -:  693:
    #####:  694:	state->numBuys++;
        -:  695:
    #####:  696:	for (int i = 1; i < state->numPlayers; i++)//The i=1 is the bug for the coincil room card
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  699:		{
    #####:  700:			drawCard(i, state);
call    0 never executed
        -:  701:		}
        -:  702:	}
    #####:  703:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  704:}
        -:  705:
function cardEffect called 13 returned 100% blocks executed 6%
       13:  706:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  707:{
        -:  708:  int i;
        -:  709:  int j;
        -:  710:  int k;
        -:  711:  int x;
        -:  712:  int index;
       13:  713:  int currentPlayer = whoseTurn(state);
call    0 returned 13
       13:  714:  int nextPlayer = currentPlayer + 1;
        -:  715:
       13:  716:  int tributeRevealedCards[2] = {-1, -1};
        -:  717:  int temphand[MAX_HAND];// moved above the if statement
       13:  718:  int drawntreasure=0;
        -:  719:  int cardDrawn;
       13:  720:  int z = 0;// this is the counter for the temp hand
       13:  721:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5 (fallthrough)
branch  1 taken 8
        5:  722:    nextPlayer = 0;
        -:  723:  }
        -:  724:  
        -:  725:	
        -:  726:  //uses switch to select card and perform actions
       13:  727:  switch( card ) 
branch  0 taken 4
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 2
branch  7 taken 0
branch  8 taken 0
branch  9 taken 4
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 3
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  728:    {
        -:  729:    case adventurer:
        4:  730:     	 adventurerFunction(&drawntreasure, state, currentPlayer, &cardDrawn, temphand, &z);
call    0 returned 4
        4:  731:	return 0;
        -:  732:			
        -:  733:    case council_room:
    #####:  734:	councilroomFunction(currentPlayer, handPos, state);		
call    0 never executed
    #####:  735:	return 0;
        -:  736:			
        -:  737:    case feast:
        -:  738:      //gain card with cost up to 5
        -:  739:      //Backup hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  741:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  742:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  743:      }
        -:  744:      //Backup hand
        -:  745:
        -:  746:      //Update Coins for Buy
    #####:  747:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  748:      x = 1;//Condition to loop on
    #####:  749:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  750:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  751:	  if (DEBUG)
        -:  752:	    printf("None of that card left, sorry!\n");
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  756:	  }
        -:  757:	}
    #####:  758:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  759:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  760:
        -:  761:	  if (DEBUG){
        -:  762:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  763:	  }
        -:  764:	}
        -:  765:	else{
        -:  766:
        -:  767:	  if (DEBUG){
        -:  768:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  769:	  }
        -:  770:
    #####:  771:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  772:	  x = 0;//No more buying cards
        -:  773:
        -:  774:	  if (DEBUG){
        -:  775:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  776:	  }
        -:  777:
        -:  778:	}
        -:  779:      }     
        -:  780:
        -:  781:      //Reset Hand
    #####:  782:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  783:	state->hand[currentPlayer][i] = temphand[i];
    #####:  784:	temphand[i] = -1;
        -:  785:      }
        -:  786:      //Reset Hand
        -:  787:      			
    #####:  788:      return 0;
        -:  789:			
        -:  790:    case gardens:
    #####:  791:      return -1;
        -:  792:			
        -:  793:    case mine:
    #####:  794:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  795:
    #####:  796:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  797:	{
    #####:  798:	  return -1;
        -:  799:	}
        -:  800:		
    #####:  801:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  807:	{
    #####:  808:	  return -1;
        -:  809:	}
        -:  810:
    #####:  811:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  812:
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:
        -:  816:      //discard trashed card
    #####:  817:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  820:	    {
    #####:  821:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  822:	      break;
        -:  823:	    }
        -:  824:	}
        -:  825:			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case remodel:
    #####:  829:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  830:
    #####:  831:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:
    #####:  836:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  840:
        -:  841:      //discard trashed card
    #####:  842:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  845:	    {
    #####:  846:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  847:	      break;
        -:  848:	    }
        -:  849:	}
        -:  850:
        -:  851:
    #####:  852:      return 0;
        -:  853:		
        -:  854:    case smithy:
        2:  855:     	smithyFunction(currentPlayer, handPos, state);
call    0 returned 2
        2:  856:	return 0;
        -:  857:		
        -:  858:    case village:
        -:  859:      //+1 Card
    #####:  860:      drawCard(currentPlayer, state);
call    0 never executed
        -:  861:			
        -:  862:      //+2 Actions
    #####:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  867:      return 0;
        -:  868:		
        -:  869:    case baron:
    #####:  870:      state->numBuys++;//Increase buys by 1!
    #####:  871:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  872:	int p = 0;//Iterator for hand!
    #####:  873:	int card_not_discarded = 1;//Flag for discard set!
    #####:  874:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  875:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  876:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  877:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  878:	    state->discardCount[currentPlayer]++;
    #####:  879:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  880:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  881:	    }
    #####:  882:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  883:	    state->handCount[currentPlayer]--;
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
    #####:  886:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  887:	    if(DEBUG) {
        -:  888:	      printf("No estate cards in your hand, invalid choice\n");
        -:  889:	      printf("Must gain an estate if there are any\n");
        -:  890:	    }
    #####:  891:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  892:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  893:	      state->supplyCount[estate]--;//Decrement estates
    #####:  894:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:		isGameOver(state);
call    0 never executed
        -:  896:	      }
        -:  897:	    }
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
        -:  900:			    
        -:  901:	  else{
    #####:  902:	    p++;//Next card
        -:  903:	  }
        -:  904:	}
        -:  905:      }
        -:  906:			    
        -:  907:      else{
    #####:  908:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  910:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  911:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:	    isGameOver(state);
call    0 never executed
        -:  913:	  }
        -:  914:	}
        -:  915:      }
        -:  916:	    
        -:  917:      
    #####:  918:      return 0;
        -:  919:		
        -:  920:    case great_hall:
        4:  921:      	greathallFunction(currentPlayer, handPos, state);
call    0 returned 4
        4:  922:	return 0;
        -:  923:		
        -:  924:    case minion:
        -:  925:      //+1 action
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  930:			
    #####:  931:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  932:	{
    #####:  933:	  state->coins = state->coins + 2;
        -:  934:	}
        -:  935:			
    #####:  936:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  937:	{
        -:  938:	  //discard hand
    #####:  939:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  940:	    {
    #####:  941:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:	    }
        -:  943:				
        -:  944:	  //draw 4
    #####:  945:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  946:	    {
    #####:  947:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  948:	    }
        -:  949:				
        -:  950:	  //other players discard hand and redraw if hand size > 4
    #####:  951:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  954:		{
    #####:  955:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  956:		    {
        -:  957:		      //discard hand
    #####:  958:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  959:			{
    #####:  960:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  961:			}
        -:  962:							
        -:  963:		      //draw 4
    #####:  964:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  965:			{
    #####:  966:			  drawCard(i, state);
call    0 never executed
        -:  967:			}
        -:  968:		    }
        -:  969:		}
        -:  970:	    }
        -:  971:				
        -:  972:	}
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case steward:
    #####:  976:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  977:	{
        -:  978:	  //+2 cards
    #####:  979:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  980:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  981:	}
    #####:  982:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  983:	{
        -:  984:	  //+2 coins
    #####:  985:	  state->coins = state->coins + 2;
        -:  986:	}
        -:  987:      else
        -:  988:	{
        -:  989:	  //trash 2 cards in hand
    #####:  990:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  991:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  992:	}
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  996:      return 0;
        -:  997:		
        -:  998:    case tribute:
    #####:  999:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1000:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1001:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1002:	  state->deckCount[nextPlayer]--;
        -: 1003:	}
    #####: 1004:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1005:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1006:	  state->discardCount[nextPlayer]--;
        -: 1007:	}
        -: 1008:	else{
        -: 1009:	  //No Card to Reveal
        -: 1010:	  if (DEBUG){
        -: 1011:	    printf("No cards to reveal\n");
        -: 1012:	  }
        -: 1013:	}
        -: 1014:      }
        -: 1015:	    
        -: 1016:      else{
    #####: 1017:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1019:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1020:	    state->deckCount[nextPlayer]++;
    #####: 1021:	    state->discard[nextPlayer][i] = -1;
    #####: 1022:	    state->discardCount[nextPlayer]--;
        -: 1023:	  }
        -: 1024:			    
    #####: 1025:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1026:	} 
    #####: 1027:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1029:	state->deckCount[nextPlayer]--;
    #####: 1030:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
        -: 1033:      }    
        -: 1034:		       
    #####: 1035:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1036:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1037:	state->playedCardCount++;
    #####: 1038:	tributeRevealedCards[1] = -1;
        -: 1039:      }
        -: 1040:
    #####: 1041:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1042:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1043:	  state->coins += 2;
        -: 1044:	}
        -: 1045:		    
    #####: 1046:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1047:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1048:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1049:	}
        -: 1050:	else{//Action Card
    #####: 1051:	  state->numActions = state->numActions + 2;
        -: 1052:	}
        -: 1053:      }
        -: 1054:	    
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case ambassador:
    #####: 1058:      j = 0;		//used to check if player has enough cards to discard
        -: 1059:
    #####: 1060:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1061:	{
    #####: 1062:	  return -1;				
        -: 1063:	}
        -: 1064:
    #####: 1065:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  return -1;
        -: 1068:	}
        -: 1069:
    #####: 1070:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1073:	    {
    #####: 1074:	      j++;
        -: 1075:	    }
        -: 1076:	}
    #####: 1077:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  return -1;				
        -: 1080:	}
        -: 1081:
        -: 1082:      if (DEBUG) 
        -: 1083:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1084:
        -: 1085:      //increase supply count for choosen card by amount being discarded
    #####: 1086:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1087:			
        -: 1088:      //each other player gains a copy of revealed card
    #####: 1089:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1092:	    {
    #####: 1093:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1094:	    }
        -: 1095:	}
        -: 1096:
        -: 1097:      //discard played card from hand
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1099:
        -: 1100:      //trash copies of cards returned to supply
    #####: 1101:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	    {
    #####: 1105:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1106:		{
    #####: 1107:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:		  break;
        -: 1109:		}
        -: 1110:	    }
        -: 1111:	}			
        -: 1112:
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case cutpurse:
        -: 1116:
    #####: 1117:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1118:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1121:	    {
    #####: 1122:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:		{
    #####: 1124:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1125:		    {
    #####: 1126:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1127:		      break;
        -: 1128:		    }
    #####: 1129:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1130:		    {
    #####: 1131:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1132:			{
        -: 1133:			  if (DEBUG)
        -: 1134:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1135:			}	
    #####: 1136:		      break;
        -: 1137:		    }		
        -: 1138:		}
        -: 1139:					
        -: 1140:	    }
        -: 1141:				
        -: 1142:	}				
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:
        -: 1149:		
        -: 1150:    case embargo: 
        -: 1151:      //+2 Coins
    #####: 1152:      state->coins = state->coins + 2;
        -: 1153:			
        -: 1154:      //see if selected pile is in play
    #####: 1155:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  return -1;
        -: 1158:	}
        -: 1159:			
        -: 1160:      //add embargo token to selected supply pile
    #####: 1161:      state->embargoTokens[choice1]++;
        -: 1162:			
        -: 1163:      //trash card
    #####: 1164:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case outpost:
        3: 1168:      	outpostFunction(currentPlayer, handPos, state);
call    0 returned 3
        3: 1169:	return 0;
        -: 1170:		
        -: 1171:    case salvager:
        -: 1172:      //+1 buy
    #####: 1173:      state->numBuys++;
        -: 1174:			
    #####: 1175:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1176:	{
        -: 1177:	  //gain coins equal to trashed card
    #####: 1178:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1179:	  //trash card
    #####: 1180:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1181:	}
        -: 1182:			
        -: 1183:      //discard card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case sea_hag:
    #####: 1188:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1189:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1190:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1191:	  state->discardCount[i]++;
    #####: 1192:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1193:	}
        -: 1194:      }
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case treasure_map:
        -: 1198:      //search hand for another treasure_map
    #####: 1199:      index = -1;
    #####: 1200:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
    #####: 1202:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1203:	    {
    #####: 1204:	      index = i;
    #####: 1205:	      break;
        -: 1206:	    }
        -: 1207:	}
    #####: 1208:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
        -: 1210:	  //trash both treasure cards
    #####: 1211:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1213:
        -: 1214:	  //gain 4 Gold cards
    #####: 1215:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	    {
    #####: 1217:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1218:	    }
        -: 1219:				
        -: 1220:	  //return success
    #####: 1221:	  return 1;
        -: 1222:	}
        -: 1223:			
        -: 1224:      //no second treasure_map found in hand
    #####: 1225:      return -1;
        -: 1226:    }
        -: 1227:	
    #####: 1228:  return -1;
        -: 1229:}
        -: 1230:
function discardCard called 9 returned 100% blocks executed 89%
        9: 1231:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1232:{
        -: 1233:	
        -: 1234:  //if card is not trashed, added to Played pile 
        9: 1235:  if (trashFlag < 1)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -: 1236:    {
        -: 1237:      //add card to played pile
        9: 1238:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        9: 1239:      state->playedCardCount++;
        -: 1240:    }
        -: 1241:	
        -: 1242:  //set played card to -1
        9: 1243:  state->hand[currentPlayer][handPos] = -1;
        -: 1244:	
        -: 1245:  //remove card from player's hand
        9: 1246:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
        2: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        7: 1251:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1252:    {
        -: 1253:      //reduce number of cards in hand
    #####: 1254:      state->handCount[currentPlayer]--;
        -: 1255:    }
        -: 1256:  else 	
        -: 1257:    {
        -: 1258:      //replace discarded card with last card in hand
        7: 1259:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1260:      //set last card to -1
        7: 1261:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1262:      //reduce number of cards in hand
        7: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        -: 1265:	
        9: 1266:  return 0;
        -: 1267:}
        -: 1268:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1269:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1270:{
        -: 1271:  //Note: supplyPos is enum of choosen card
        -: 1272:	
        -: 1273:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1274:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1275:    {
    #####: 1276:      return -1;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //added card for [whoseTurn] current player:
        -: 1280:  // toFlag = 0 : add to discard
        -: 1281:  // toFlag = 1 : add to deck
        -: 1282:  // toFlag = 2 : add to hand
        -: 1283:
    #####: 1284:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1287:      state->deckCount[player]++;
        -: 1288:    }
    #####: 1289:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1290:    {
    #####: 1291:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1292:      state->handCount[player]++;
        -: 1293:    }
        -: 1294:  else
        -: 1295:    {
    #####: 1296:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1297:      state->discardCount[player]++;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //decrease number in supply pile
    #####: 1301:  state->supplyCount[supplyPos]--;
        -: 1302:	 
    #####: 1303:  return 0;
        -: 1304:}
        -: 1305:
function updateCoins called 14 returned 100% blocks executed 82%
       14: 1306:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1307:{
        -: 1308:  int i;
        -: 1309:	
        -: 1310:  //reset coin count
       14: 1311:  state->coins = 0;
        -: 1312:
        -: 1313:  //add coins for each Treasure card in player's hand
       84: 1314:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 70
branch  1 taken 14 (fallthrough)
        -: 1315:    {
       70: 1316:      if (state->hand[player][i] == copper)
branch  0 taken 50 (fallthrough)
branch  1 taken 20
        -: 1317:	{
       50: 1318:	  state->coins += 1;
        -: 1319:	}
       20: 1320:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 1321:	{
    #####: 1322:	  state->coins += 2;
        -: 1323:	}
       20: 1324:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 1325:	{
    #####: 1326:	  state->coins += 3;
        -: 1327:	}	
        -: 1328:    }	
        -: 1329:
        -: 1330:  //add bonus
       14: 1331:  state->coins += bonus;
        -: 1332:
       14: 1333:  return 0;
        -: 1334:}
        -: 1335:
        -: 1336:
        -: 1337://end of dominion.c
        -: 1338:
